substitutions:
  devicename: "led8x8-qmi8658"
  friendly_name: "8x8 pixel matrix "
  device_description: " (LED Pixel matrix 8x8, ESP32-S3)"
  xscrollpadding: "4" # in pix
  
esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: arduino

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

captive_portal:

logger:
  level: DEBUG
  baud_rate: 0 # disable logging over uart

api:
  encryption:
    key: !secret api_key

ota:

web_server:

esphome:
  name: ${devicename}
  friendly_name: ${friendly_name}
  comment: "${device_description}"

  platformio_options:
    board_build.flash_mode: dio

  libraries:
    - "Wire"
    - "SPI"
    - "SensorLib"
########## EXTERNAL LIB #######################
  includes:
    - my_dev_components/qmi8658.h

sensor:
  - platform: custom
    lambda: |-
      auto qmi8658 = new QMI8658();
      App.register_component(qmi8658);
      return {qmi8658->temperature_sensor, qmi8658->accel_x_sensor};
    # return {qmi8658->temperature_sensor, sht20->humidity_sensor, sht20->vpd_sensor, sht20->dew_point_sensor};
    sensors:
      - name: "Temperature"
        id: sensor_temperature
        unit_of_measurement: °C
        accuracy_decimals: 2
      - name: "Accel X"
        id: sensor_accel_x
        unit_of_measurement: m/s²
        accuracy_decimals: 4

########## EXTERNAL COMPONENT #######################
# external_components:
# - source:
#       type: local
#       path: my_dev_components

# i2c:
#   sda: GPIO11
#   scl: GPIO12

# sensor:
#   - platform: qmi8658
#     address: 0x6B
#     acceleration_x:
#       name: "QMI8658 Acceleration X"
#     acceleration_y:
#       name: "QMI8658 Acceleration Y"
#     acceleration_z:
#       name: "QMI8658 Acceleration Z"
#     temperature:
#       name: "QMI8658 Temperature"
#       filters:
#         - offset: 34.0
#     # range: 200uT
#     # oversampling: 512x
#     update_interval: 1s


########## MPU6050 TEMPLATE #######################
# i2c:
#   sda: GPIO11
#   scl: GPIO12
# sensor:
#   - platform: mpu6050
#     address: 0x68
#     accel_x:
#       name: "MPU6050 Accel X"
#     accel_y:
#       name: "MPU6050 Accel Y"
#     accel_z:
#       name: "MPU6050 Accel z"
#     gyro_x:
#       name: "MPU6050 Gyro X"
#     gyro_y:
#       name: "MPU6050 Gyro Y"
#     gyro_z:
#       name: "MPU6050 Gyro z"
#     temperature:
#       name: "MPU6050 Temperature"

########## TEXT #######################
text_sensor:
  - platform: template
    name: "Text"
    id: pixel_text

select:
  - platform: template
    name: Mode
    id: pixel_select
    options:
     - "First text"
     - "Have selected a new"
     - "Short"
    initial_option: "First text"
    optimistic: true
    set_action:
      - logger.log:
          format: "Chosen option: %s"
          args: ["x.c_str()"]
      # - text_sensor.set: 

font:
  - id: tinyfont
    file: "fonts/DejaVuSans-Bold.ttf"
    size: 9
    glyphs: '♡Ωäöüß!"%()+,-_.:*=°?~#0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz'

light:
  - platform: neopixelbus
    name: "NeoPixel Light"
    id: pixel_matrix
    type: RGB
    variant: WS2811
    pin: GPIO14
    num_leds: 64
    color_correct: [40%, 40%, 40%]
    effects: 
      - addressable_scan:
      - addressable_twinkle:
display:
  - platform: addressable_light
    id: pixel_display
    addressable_light_id: pixel_matrix
    width: 8
    height: 8
    pixel_mapper: |-
      if (x % 2 == 0) {
        return (x * 8) + y;
      }
      return (x * 8) + (7 - y);
    rotation: 180°
    update_interval: 1000ms
    auto_clear_enabled: true
    lambda: |-
          static uint16_t xpos = 0;
          const char * text = id(pixel_select).state.c_str();
          int x_start, y_start;
          int width, height;
          it.get_text_bounds(0, 0, text, id(tinyfont),TextAlign::TOP_LEFT, &x_start, &y_start, &width, &height); 
          it.print(-(xpos % (width + $xscrollpadding)), -2, id(tinyfont), Color(0xFF1010), TextAlign::TOP_LEFT, text);           
          if (width > it.get_width()) // only scroll if nesessary
            xpos++;
          else
            xpos = 0;
    ########## BULLS-EYE #######################
    # lambda: |-
    #       // Draw a bulls-eye pattern
    #       Color red = Color(0x5F0000);
    #       Color green = Color(0x005F00);
    #       Color blue = Color(0x00005F);
    #       it.rectangle(0, 0, 8, 8, red);
    #       it.rectangle(1, 1, 6, 6, green);
    #       it.rectangle(2, 2, 4, 4, blue);
    #       it.rectangle(3, 3, 2, 2, red);

